/* Data source: Dummy data downloaded from web */
CREATE SCHEMA zomato;
USE zomato;

/* Data imported from CSV to mysql */
SHOW TABLES;

/* Data exploration and required cleaning/transformation */

-- On `users` table 
SELECT * FROM users;
DESC users;

ALTER TABLE users
ADD
	PRIMARY KEY(user_id),
MODIFY
	signup_date DATE;

-- --------------------xxx--------------------

-- On `gold_users` table 
SELECT * FROM gold_users;
DESC gold_users;

ALTER TABLE gold_users
ADD 
	CONSTRAINT user_id_fk_1
    FOREIGN KEY(user_id) REFERENCES users(user_id),
MODIFY
	gold_signup_date DATE;

-- --------------------xxx--------------------

-- On `products` table 
SELECT * FROM products;
DESC products;

START TRANSACTION;
UPDATE products
SET
	price = MID(price, 4);
SELECT * FROM products;
COMMIT;

ALTER TABLE products
ADD
	PRIMARY KEY(product_id),
MODIFY
	price INT;

-- --------------------xxx--------------------

-- On `sales` table 
SELECT * FROM sales;
DESC sales;

START TRANSACTION;
UPDATE sales
SET 
	order_date = CONCAT(RIGHT(order_date,4),'-',MID(order_date,4,2),'-',LEFT(order_date,2));
SELECT * FROM sales;
COMMIT;

ALTER TABLE sales
ADD
	CONSTRAINT product_id_fk_1
    FOREIGN KEY(product_id) REFERENCES products(product_id),
ADD
    CONSTRAINT user_id_fk_2
    FOREIGN KEY(user_id) REFERENCES users(user_id),
MODIFY
	order_date DATE,
MODIFY product_id INT AFTER user_id;

-- --------------------xxx--------------------

/* Q1) What is the total revenue generated so far by the respective store through zomato? */

SELECT SUM(s.qty * p.price) total_revenue FROM sales s
JOIN products p
ON
	p.product_id = s.product_id;

-- --------------------xxx--------------------

/* Q2) What is the total revenue generated by top 5 customers and also show their membership status as 'Gold' Or "Regular' respectively. */ 

SELECT s.user_id, SUM(s.qty * p.price) total_revenue,
CASE 
	WHEN s.user_id IN (SELECT g.user_id from gold_users g)
    THEN 'Gold'
	ELSE 'Regular'
END AS membership_status
FROM sales s
JOIN products p
ON
	p.product_id = s.product_id
GROUP BY 1, 3
ORDER BY 2 DESC
LIMIT 5;

-- OR
SELECT s.user_id, SUM(s.qty * p.price) total_revenue, 
IF(s.user_id IN (SELECT g.user_id FROM gold_users g), 'Gold', 'Regular') membership_status
FROM sales s
JOIN products p
ON
	p.product_id = s.product_id
GROUP BY 1, 3
ORDER BY 2 DESC
LIMIT 5;

-- --------------------xxx--------------------

/* Q3) Show the top 5 most popular products & bottom 5 products as per their demands respectively. */

(SELECT s.product_id, p.product_name, COUNT(s.product_id) AS repeated_count, 'Top 5' Tag 
FROM sales s
JOIN products p
ON p.product_id = s.product_id
GROUP BY 1, 2
ORDER BY 3 DESC
LIMIT 5)
UNION
(SELECT s.product_id, p.product_name, COUNT(s.product_id) AS repeated_count, 'Bottom 5' Tag 
FROM sales s
JOIN products p
ON p.product_id = s.product_id
GROUP BY 1, 2
ORDER BY 3 ASC
LIMIT 5
);

-- --------------------xxx--------------------

/* Q4) Identify products that are low in demand and requires promotional offers/ */

SELECT s.product_id, COUNT(s.product_id) repeated_count  
FROM sales s
GROUP BY 1
ORDER BY 2 ASC
LIMIT 5;

-- --------------------xxx--------------------

/* Q5) How many days have each customers visited zomato to order from the respective store? */

SELECT s.user_id, 
COUNT(DISTINCT s.order_date) count_of_orders_placed FROM sales s
GROUP BY user_id
ORDER BY 2 DESC;

/* Q6) What was the first product purchased by the top 5 customers through zomato? */

WITH cte_tbl AS
( 
	SELECT s.user_id, SUM(p.price * s.qty) total_amount
    FROM sales s
    JOIN products p
    ON p.product_id = s.product_id
    GROUP BY 1
    ORDER BY 2 DESC
    LIMIT 5
)  
SELECT * FROM (
SELECT s.user_id, s.order_date, p.product_name, ROW_NUMBER() OVER(PARTITION BY s.user_id ORDER BY s.order_date ASC) rnk 
FROM sales s
JOIN products p
ON p.product_id = s.product_id
WHERE s.user_id IN ( select c.user_id from cte_tbl c)
GROUP BY 1, 2, 3
ORDER BY 2
) b
WHERE rnk = 1
ORDER BY 2 ASC;

-- --------------------xxx--------------------

/* Q7) Which products are likely to be the first pick for new customers on zomato? */

WITH cte_tbl AS
(SELECT *, 
ROW_NUMBER() OVER(PARTITION BY s.user_id ORDER BY s.order_date ASC) rnk
FROM sales s)
SELECT product_id, COUNT(product_id) repeated_first_order_count FROM cte_tbl
WHERE rnk <= 1
GROUP BY 1
ORDER BY 2 DESC;
-- OR
SELECT b.product_id, COUNT(b.product_id) repeated_first_orders_count FROM
(SELECT *, 
ROW_NUMBER() OVER(PARTITION BY s.user_id ORDER BY s.order_date ASC) rnk
FROM sales s
) b
WHERE rnk <= 1
GROUP BY 1
ORDER BY 2 DESC;

-- --------------------xxx--------------------

/* Q8) What is the most purchased item on menu and how many times it was purchased by all customers? */

SELECT p.product_name, COUNT(s.product_id) repeated_orders
FROM sales s
JOIN products p
ON p.product_id = s.product_id
GROUP BY 1
ORDER BY 2 DESC;

-- --------------------xxx--------------------

/* Q9) Which is the most purchased item on menu and how many times was it purchased by individual customers? */

WITH cte_tbl AS
(SELECT s.product_id, count(s.product_id) count FROM sales s
GROUP BY 1
ORDER BY 2 DESC
LIMIT 1)
SELECT s.user_id, s.product_id, COUNT(s.product_id) repeated_orders
FROM sales s
WHERE s.product_id IN ( SELECT product_id FROM cte_tbl)
GROUP BY 1,2
ORDER BY 3 DESC;

-- --------------------xxx--------------------

/* Q10) Which item was most popular for each customer? */

SELECT b.user_id, b.product_id FROM
(SELECT s.user_id, s.product_id, COUNT(s.product_id) count,
ROW_NUMBER() OVER(PARTITION BY s.user_id ORDER BY COUNT(s.product_id) DESC) rnk
FROM sales s
GROUP BY 1, 2
ORDER BY 3 DESC) b
WHERE rnk <= 1
ORDER BY 1;

-- --------------------xxx--------------------

/* Q11) Which item was first purchased by a regular member after they became a gold member? */

SELECT b.user_id, b.product_id, b.gold_signup_date, b.order_date FROM
(SELECT s.user_id, s.product_id, s.order_date, g.gold_signup_date, ROW_NUMBER() OVER(PARTITION BY s.user_id ORDER BY s.order_date ASC) rnk
FROM sales s
JOIN gold_users g
ON g.user_id = s.user_id
WHERE s.order_date >= g.gold_signup_date) b
WHERE rnk <= 1
GROUP BY 1,2,3,4
ORDER BY 3,2;

-- --------------------xxx--------------------

/* Q12) Which item was purchased just before a regular member became a gold member? */

SELECT * FROM
(SELECT s.user_id, s.product_id, s.order_date, g.gold_signup_date,
ROW_NUMBER() OVER(PARTITION BY s.user_id ORDER BY s.order_date DESC) rnk 
FROM sales s
JOIN gold_users g
ON g.user_id = s.user_id
WHERE s.order_date < g.gold_signup_date) b
WHERE rnk <= 1
ORDER BY 3, 4;

-- --------------------xxx--------------------

/* Q13) What is the total no. of orders and amount spent by each customer before they became a gold member? */

SELECT s.user_id, SUM(s.qty * p.price) amount_spent, COUNT(DISTINCT s.order_id) orders_purchased FROM sales s
JOIN gold_users g
ON g.user_id = s.user_id
JOIN products p
ON p.product_id = s.product_id
WHERE s.order_date < g.gold_signup_date
GROUP BY 1
ORDER BY 2 DESC, 3 DESC; 

-- --------------------xxx--------------------

/* Q14) Count how many high ticket size orders (i.e qty > 3/order) were placed ? */

SELECT COUNT(*) FROM
(SELECT s.order_id, SUM(s.qty) qty FROM sales s
WHERE qty >= 3
GROUP BY 1) b;

-- --------------------xxx--------------------

/* Q15) Consider 10 zomato points = Rs 2
		For	Product: P1 - P6 = 5 points / item
					 P7 - P10 = 10 points / item
					 P11 - P25 = 5 points / item
	Then, Calculate how many zomato points have been collected so far by individual user and for which product maximum zomato points have been rewarded to customers so far. 
*/
CREATE TEMPORARY TABLE points(user_id INT, product_name TEXT, total_qty INT, zomato_points INT);
INSERT INTO points( 
SELECT s.user_id, p.product_name, sum(s.qty) total_qty,
CASE 
	WHEN p.product_name IN ('P7', 'P8', 'P9', 'P10') THEN sum(s.qty) * 10
    ELSE sum(s.qty) * 5
END zomato_points
FROM sales s
JOIN products p
ON p.product_id = s.product_id
GROUP BY 1, 2
ORDER BY 2 DESC
);
-- Zomato points have been collected so far by individual user
SELECT user_id, SUM(zomato_points) FROM points
GROUP BY 1
ORDER BY 2 DESC;
-- Product for which maximum zomato points have been rewarded to customers
SELECT product_name, SUM(zomato_points) points_rewarded, round(SUM(zomato_points) / 5, 0) reward_amount 
FROM points
GROUP BY 1
ORDER BY 2 DESC, 3 DESC;

-- --------------------xxx--------------------